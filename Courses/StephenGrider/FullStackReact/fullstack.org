#+TITLE: Full Stack React Course
#+STARTUP: indent
#+STARTUP: overview
* Part One: Full Stack React Overview
[[https://docs.google.com/document/d/1ZVLphlOH0PEOUCd5v2UJVHiRSKuYjJI-AS4xQWYXmq8/edit#heading=h.fnjk6vnqzbqk][Course Cheat Sheet]]
** Project Overview
This is one single project with a large number of features.  The first part will build in a survey function that will allow the app owner to:
*** App Goals
1. Ask some number of users to answer questions.
2. Send an email requesting feedback.
3. Record their answers.
4. Get a tabulation of results.
*** App Work Flow: 
One: Mongodb PassportJS Stripe React Redux Redux Form
User signs up via OAuth -> Pays via Stripe -> Creates a new campaign -> Enters email list to send survey ->

Two: Email-provider Express Mongodb
Send email list of survey takers -> Survey takers click email link to provide feedback ->

Three: Mongodb React Redux
We tabulate feedback -> Use receives report of all survey responses
*** [[https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/t/lecture/7593662?start=0][Course Link: App Mockups]]
* Server Side Architecture
This app will use React, Node/Express, and Mongodb deployed to Heroku.
A user will go to a URL where the React app will ask for some information.
The React app will talk to an Express API via HTTP.  The Express API will access the data in Mongodb and return a result using some business logic.
** Express setup
:LOGBOOK:
CLOCK: [2018-06-02 Sat 13:01]--[2018-06-02 Sat 13:49] =>  0:48
:END:
_Some definitions before setting up Express boilerplate._
:StartingDefinitions:
*Node:* A JavaScript runtime used to execute code outside of the browser.
*Express:* A Library that runs in the Node runtime.  Express has helpers to make dealing with HTTP traffic easier.
*CommonJS:* This course will only use CommonJS modules for requiring JavaScript modules. NodeJS does not have support for ECMA Script 2015 modules on the server side as of June 2018.
:END:
_Boiler Plate Code_
#+NAME:Route handler for express app.
#+BEGIN_SRC js
const express = require('express');
const app = express();

// This segement is called a route hendler
app.get('/', (req, res) => { // Express has several route hendler methodes.  Here we use git.
  res.send({ hi: 'hello world!' });
});

app.listen(5000);
#+END_SRC
_Express' five different methods for handling requests_
:ExpressRouteRequestMethods:
get: get information
post: send information
put: update all the properties of something
delete: delete something
patch: update one or two properties of something
:END:
/For more about how the sample code works, watch the lecture [[https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/t/lecture/7593684?start=0][Course Link: Express Route Handlers]] or see the [[https://expressjs.com/en/guide/routing.html][Express routing documentation]]./
** Heroku Deployment
*** Deployment Checklist
:LOGBOOK:
CLOCK: [2018-06-02 Sat 13:55]--[2018-06-02 Sat 14:10] =>  0:15
:END:
_Dynamic Port Binding_
Heroku tells us which port the app will use, we make sure to listen to the port Heroku binds.
#+NAME: Node can dynamically assign a port to the production app using PORT
#+BEGIN_SRC js
const PORT = process.env.PORT || 5000; // listen to the production port OR 5000
#+END_SRC
_Specific Node Environment_
We want to use a specific version of NodeJS, so we need to tell Heroku which version we will use.
#+NAME: define engines inside package.json file
#+BEGIN_SRC js
"engines": {
    "node": "8.1.1",
    "npm": "5.0.3"
  }
#+END_SRC
_Specific start script_
Instruct Heroku what command to run our server
#+NAME: Make a start script in package.json
#+BEGIN_SRC js
"scripts": {
    "start": "node index.js"
  }
#+END_SRC
_Create .gitignore file_
We don't want to include dependencies, Heroku has manages dependencies for us.
*** Install Heroku
:LOGBOOK:
CLOCK: [2018-06-03 Sun 16:02]
:END:
Make sure git is installed and a ~.gitignore~ file is ignoring ~node_modules~.
Check is heroku is installed, if not use ~brew install heroku~ on Mac.
Login in with ~heroku login~
Commit unsaved changes with ~git add~ and ~git commit -a~
Push to remote branch ~git push --set-upstream heroku master~
Visit the remote branch in the browser with ~heroku open~
Use ~git push~ to update deployments
